    public ArrayList<String> getMissedMonthsFiles(String year) {
        /*
        int currentDay, currentMonth, currentYear;
        ArrayList<String> missedMonths = new ArrayList<String>();
        String yearMonth, month;
        ZoneId zoneId = ZoneId.of("Europe/Paris");
        LocalDateTime localTime = LocalDateTime.now(zoneId);
        currentDay = localTime.getDayOfMonth();
        currentMonth = localTime.getMonthValue();
        currentYear = localTime.getYear();
        boolean stopSearch = false;
        if (String.valueOf(currentYear).equals(year)) {
            //si l'année donner est l'année courante, on met le boolean stopSearch a true pour ne pas
            //mettre les mois qui sont plus grand que le mois courant comme missed !
            stopSearch = true;
        }

        for (int i = 1; i <= 12; i++) {
            month = ("00" + i).substring(String.valueOf(i).length());
            yearMonth = year + month;
            if (stopSearch && Integer.parseInt(month) > currentMonth) //si le mois generer est supperieure au mois courant
            {
                break;
            }

            //si le fichier de ce moi n'existe pas OU si il est pas a jour alors on l'ajout comme missed
            if (!checkIfFileExists(getCsvFilePathFromDate(yearMonth)) || !isUpdatedMonth(yearMonth)) {
                missedMonths.add(yearMonth);
            }

        }
        return missedMonths;
    */
        return null;
    }




    ------------------------


        /**
         * This method returns the latest available data localy
         *
         * @return latest available data that we have localy if exists null if no
         * data found localy
         */

    //    public ArrayList<DataCity> getLatestAvailableData() {
    //        ArrayList<DataCity> liste = null;
    //        String file = Utilitaire.getLatesttAvailableFile();
    //        //System.out.println("damnFile:"+file);
    //        String date = this.getLatestAvailableDateOnFile(file);
    //        if (date != null) {
    //            liste = this.getDataForDateByCity(date, "all");
    //        }
    //
    //        return liste;
    //    }



    -----------------------


//    public ArrayList<DataCity> getDataForYearByCity(String date, String cityId) {
//        String year = date.substring(0, 4);
//        ArrayList<DataCity> liste = new ArrayList<DataCity>();
//        ArrayList<DataCity> tempList = null;
//        String yearMonth;
//        for (int i = 1; i <= 12; i++) {
//            if (i < 10) {
//                yearMonth = year + ("00" + i).substring("i".length());
//            } else {
//                yearMonth = year + String.valueOf(i);
//            }
//
//            tempList = getDataForDateByCity(yearMonth, cityId);
//            if (tempList != null) {
//                liste.addAll(tempList);
//                //System.out.println("list is null");
//            }
//            ////System.out.println("tour:"+i);
//        }
//        return liste;
//    }


    ----------------------------

    /**
     * Cette methode retourne la date des donner la plus recente inclut dans un
     * fichier
     *
     * @param date sous la forme de yyyymm correspond au nom du fichier qu'on
     *             veux chercher dedans
     * @return la date la plus recente dans le fichier qui correspond a @date
     */
    public String getLatestAvailableDateOnFile(String date) {
        File f;
        FileReader fr;
        BufferedReader br;
        String line;
        int latestDate = 0;
        String dateLine;
        String filePath;

        try {
            filePath = utilitaire.Utilitaire.getCsvFilePathFromDate(date);
            if (!utilitaire.Utilitaire.checkIfFileExists(filePath)) {
                return null;
            }

            f = new File(filePath);
            fr = new FileReader(f);
            br = new BufferedReader(fr);
            line = br.readLine();

            if (line.startsWith("numer_sta")) {
                line = br.readLine();
            }

            while (line != null) {
                dateLine = line.split(";")[1].substring(0, 10);

                if (Integer.parseInt(dateLine) > latestDate) {
                    latestDate = Integer.parseInt(dateLine);
                }

                line = br.readLine();
            }

            fr.close();
            br.close();
            return String.valueOf(latestDate);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Utilitaire.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IOException ex) {
            Logger.getLogger(Utilitaire.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    --------------------------
    /**
         * @return ArrayList contenant les dates existantes en local
         */
        private ArrayList<String> getYearExists() {
            ArrayList<String> list = new ArrayList<>();
            File file1 = new File(Configuration.DATA_DIRECTORY_NAME);
            for (File file : file1.listFiles()) {
                list.add(file.toString().substring(8));
            }

            return list;
        }

        /**
         * @param year
         * @return arrayList contenant les mois existants en local pour une année
         * mise en paramétre
         */
        private ArrayList<String> getMonthsExistsForYear(String year) {
            ArrayList<String> list = new ArrayList<>();
            File file1 = new File(Configuration.DATA_DIRECTORY_NAME + "/" + year);
            for (File file : file1.listFiles()) {
                list.add(file.toString().substring(8));
            }

            return list;
        }

        ------------------------
         /**
             *
             * @param stationId
             * @return le nom d'une station a partir de son Id
             */
            private String getStationNameFromId(int stationId) {
                return stationList.get(stationId).getNom();
            }





    ----------------------------------------------------





    -----------------------------------------------

        private List<DataBean> parseDataList(String date, String station) {
    ////        ArrayList<DataCity> listDonnee = model.getListForChart(date, station);
    //        ArrayList<DataBean> listDataBean = new ArrayList<DataBean>();
    ////        if (listDonnee != null) {
    ////            for (DataCity villeTemp : listDonnee) {
    ////                listDataBean.add(villeTemp.toDataBean());
    //            }
    //        }
    //        return listDataBean;
            return null;
        }



        -----------------------------------
            /**
             * <<<<<<< HEAD
             * simple method that returns for a given date the corresponding mode
             * mode 0 : if year & month & day are given
             * 1 : if ONLY year & month are given
             * 2 : if ONLY year is given
             *
             * @param date
             * @return TRUE si le fichier est a jour FALSE sinon
             */
            public boolean isUpdatedMonth(String date) {
                String lastDate, year, month, lastDay;
                //fichier n'existe pas
                if (!Utilitaire.checkIfFileExists(Utilitaire.getCsvFilePathFromDate(date))) {
                    return false;
                }

                lastDate = getLatestAvailableDateOnFile(date);
                System.out.println("lastDate=" + lastDate);
                lastDay = lastDate.substring(6, 8);

                year = date.substring(0, 4);
                month = date.substring(4, 6);

                if (date == null) {
                    return false;
                }

                int currentYear;
                String currentDay, currentMonth;
                ZoneId zoneId = ZoneId.of("Europe/Paris");
                LocalDateTime localTime = LocalDateTime.now(zoneId);

                currentDay = String.valueOf(localTime.getDayOfMonth());
                //pour avoir 01 pour le premier jour de moi au lieu de 1
                currentDay = ("00" + currentDay).substring(currentDay.length());

                //pour avoir 01 pour janvier au lieu de 1
                currentMonth = String.valueOf(localTime.getMonthValue());
                currentMonth = ("00" + currentMonth).substring(currentMonth.length());

                currentYear = localTime.getYear();

                //System.out.println("lastDay:"+lastDay+" currentDay:"+currentDay);
                if (String.valueOf(currentYear).equals(year)
                        && //si le fichier contient les donnees de l'année courante
                        String.valueOf(currentMonth).equals(month)
                        && //et si le fichier contient les donnees mois courant
                        lastDay.equals(String.valueOf(currentDay)) //Donc on test si la derniere date de ce fichier est celle d'ajourdhui :D
                        ) {
                    return true;
                } else {
                    int nbDays = Utilitaire.getNumberDaysOfMonth(Integer.parseInt(year), Integer.parseInt(month));
                    //System.out.println("nbDays:"+nbDays);
                    if (String.valueOf(nbDays).equals(lastDay)) {
                        return true;
                    } else {
                        return false;
                    }
                }

            }





--------------------------------------------------

    public List<DataBean2> getData(String stationName,
            String year,
            String month,
            String day,
            int mode,
            int MinOrMaxOrMoy,
            boolean importOrNot
    ) throws IOException {

        Map<Integer, Mois> missingMonths;
        Map<Integer, Jour> missingDays;
        Map<Integer, Releve> missingReleve;
        List<DataBean2> listReleves = new ArrayList<DataBean2>();
        String stationIdTemp = getStationIdFromName(stationName);

        String stationId = ("00000" + stationIdTemp).substring(String.valueOf(stationIdTemp).length());
        System.out.println("stationId: " + stationId + " temp:" + stationIdTemp);

        String ordre;
        boolean result;
        int yearInt, monthInt, dayInt, stationIdInt, ordreInt, jourIdInt, moisIdInt, anneeIdInt;
        String jourId, moisId, anneeId;
        stationIdInt = Integer.parseInt(stationId);
        int x, y;
        x = stationList.get(stationIdInt).getPointObj().getX();
        y = stationList.get(stationIdInt).getPointObj().getY();

        switch (mode) {
            /**
             * *******************************************************************************************************
             */
            case 0://jour pas besoin de faire la moyenne
                dayInt = Integer.parseInt(day);
                monthInt = Integer.parseInt(month);
                yearInt = Integer.parseInt(year);
                stationIdInt = Integer.parseInt(stationId);
                missingReleve = stationList.get(stationIdInt)
                        .getAndCreateAnnee(yearInt)
                        .getAndCreateMois(monthInt)
                        .getAndCreateJour(dayInt)
                        .getMissingReleves(yearInt, monthInt);
                if (missingReleve.size() > 0) {
                    // si on a trouver des relevés qui manque, on essaye de les uploader depuis les fichiers en local
                    //ATTENTION LE CAST STRING INT
                    System.out.println("Missing relevées found , trying to upload them from local files size=" + missingReleve.size());
                    for (Releve releve : missingReleve.values()) {
                        ordreInt = releve.getOrdre() * 3;
                        ordre = ("00" + ordreInt).substring(String.valueOf(ordreInt).length());
                        getDataForDateByCity(
                                year
                                        + month
                                        + day
                                        + ordre,
                                stationId
                        );
                    }

                    missingReleve.clear();

                    missingReleve = stationList.get(stationIdInt)
                            .getAndCreateAnnee(yearInt)
                            .getAndCreateMois(monthInt)
                            .getAndCreateJour(dayInt)
                            .getMissingReleves(yearInt, monthInt);
                    /*
                    stationList.get(stationIdInt)
                            .getAndCreateAnnee(yearInt)
                            .getAndCreateMois(monthInt)
                            .getAndCreateJour(dayInt)
                            .showAll();
                     */

                    if (missingReleve.size() > 0) {
                        /**
                         * MANQUE SI APP EST EN LIGNE*
                         */

                        if (Utilitaire.netIsAvailable() != -1) {
                            //si encore on a trouver des relevés qui manque , et si app est enligne on lance le telechargement
                            System.out.println("Still have missing relevées , trying to download them! size=" + missingReleve.size());
                            downloadAndUncompress(String.valueOf(year) + String.valueOf(month));

                            System.out.println("Download is done , trying to upload local files ");
                        } else {
                            if( importOrNot){
                                 DisplayAlertToImport();
                            }
                            System.out.println("No need to import");
                        }

                        for (Releve releve : missingReleve.values()) {
                            ordreInt = releve.getOrdre() * 3;
                            ordre = ("00" + ordreInt).substring(String.valueOf(ordreInt).length());
                            getDataForDateByCity(
                                    year
                                    + month
                                    + day
                                    + ordre,
                                    stationId
                            );
                        }


                        if (Utilitaire.netIsAvailable() != -1) {
                            downloadAndUncompress(String.valueOf(year) + String.valueOf(month));
                            System.out.println("Download is done , trying to upload local files ");
                            for (Releve releve : missingReleve.values()) {
                                ordreInt = releve.getOrdre() * 3;
                                ordre = ("00" + ordreInt).substring(String.valueOf(ordreInt).length());
                                getDataForDateByCity(
                                        year +
                                                month +
                                                day +
                                                ordre,
                                        stationId
                                );
                            }

                            missingReleve = stationList.get(stationIdInt)
                                    .getAndCreateAnnee(yearInt)
                                    .getAndCreateMois(monthInt)
                                    .getAndCreateJour(dayInt)
                                    .getMissingReleves(yearInt, monthInt);

                            /*
                            if (missingReleve.size() > 0) {
                                //si encore on a des relevés qui manque
                                System.out.println("Attention - Not completed data, returning data even though ! size=" + missingReleve.size());
                            }
                            */
                        } else {
                            /**AFFICHER IMPORT **/

                            System.out.println("No internet available");

                        }
                    }
                }

                System.out.println("Everything looks good, returning data now");

                listReleves = stationList.get(stationIdInt)
                        .getAndCreateAnnee(yearInt)
                        .getAndCreateMois(monthInt)
                        .getAndCreateJour(dayInt)
                        .getAllReleves(stationName, stationIdInt, yearInt, monthInt, x, y);

                System.out.println("List relevés");
                /*for (DataBean2 dataBean2 : listReleves) {
                    System.out.println("station:" + dataBean2.getIdStation() + "ordre: " + dataBean2.getDate().getTime() + " temperature:" + dataBean2.getTemperature());
                }*/

                if (listReleves.isEmpty()) {
                    System.out.println("Attention, Null data found  ! ");
                }
                return listReleves;

            /**
             * *******************************************************************************************************
             */
            case 1:// un mois on fait la moyenne ou le min ou le max
                monthInt = Integer.parseInt(month);
                yearInt = Integer.parseInt(year);
                missingDays = stationList.get(stationIdInt)
                        .getAndCreateAnnee(yearInt)
                        .getAndCreateMois(monthInt)
                        .getMissingData(yearInt);

                if (missingDays.size() > 0) {
                    // si on a trouver des jours qui manque, on essaye de les uploader depuis les fichiers en local
                    //ATTENTION LE CAST STRING INT
                    System.out.println("Missing days found , trying to upload them from local files size=" + missingDays.size());
                    for (Jour jour : missingDays.values()) {
                        jourIdInt = jour.getId();
                        jourId = ("00" + jourIdInt).substring(String.valueOf(jourIdInt).length());
                        getDataForDateByCity(
                                year
                                        + month
                                        + jourId,
                                stationId
                        );
                    }

                    missingDays.clear();

                    missingDays = stationList.get(stationIdInt)
                            .getAndCreateAnnee(yearInt)
                            .getAndCreateMois(monthInt)
                            .getMissingData(yearInt);

                    /*
                    stationList.get(stationIdInt)
                            .getAndCreateAnnee(yearInt)
                            .getAndCreateMois(monthInt)
                            .showAll();
                     */
                    if (missingDays.size() > 0) {
                        /**
                         * MANQUE SI APP EST EN LIGNE*
                         */

                        if (Utilitaire.netIsAvailable() != -1) {
                            //si encore on a trouver des jours qui manque , et si app est enligne on lance le telechargement
                            System.out.println("Still have missing days , trying to download them! size=" + missingDays.size());
                            downloadAndUncompress(String.valueOf(year) + String.valueOf(month));
                        } else {
                            if( importOrNot){
                                 DisplayAlertToImport();
                            }
                            System.out.println("No need to import");
                        }
                        System.out.println("Download is done , trying to upload local files ");
                        for (Jour jour : missingDays.values()) {
                            jourIdInt = jour.getId();
                            jourId = ("00" + jourIdInt).substring(String.valueOf(jourIdInt).length());
                            getDataForDateByCity(
                                    year
                                    + month
                                    + jourId,
                                    stationId
                            );
                        }


                            if (missingDays.size() > 0) {
                                //si encore on a des jours qui manque
                                System.out.println("Attention - Not completed data, returning data even though ! size=" + missingDays.size());
                            /*for (Jour jour : missingDays.values()) {
                                System.out.println(jour.getId());
                            }
                            */
                            }

                        } else {
                            /**AFFICHER IMPORT**/


                            System.out.println("No internet available");
                        }
                    }
                }

                System.out.println("Everything looks good, returning data now");

                if (MinOrMaxOrMoy == 0) {//moy
                    listReleves = stationList.get(stationIdInt)
                            .getAndCreateAnnee(yearInt)
                            .getAndCreateMois(monthInt)
                            .getMoyennesParJour(stationName,stationIdInt, year,x,y);
                } else {
                    if (MinOrMaxOrMoy == 1) {//min
                        listReleves = stationList.get(stationIdInt)
                                .getAndCreateAnnee(yearInt)
                                .getAndCreateMois(monthInt)
                                .getMinParMois(stationName,stationIdInt,year,x,y);
                    } else {//max
                        listReleves = stationList.get(stationIdInt)
                                .getAndCreateAnnee(yearInt)
                                .getAndCreateMois(monthInt)
                                .getMaxParMois(stationName,stationIdInt, year,x,y);
                    }
                }

                System.out.println("List jours .. size:" + listReleves.size());
/*                for (DataBean2 dataBean2 : listReleves) {
                    System.out.println("station:" + dataBean2.getIdStation() + "ordre: " + dataBean2.getDate().getTime() + " temperature:" + dataBean2.getTemperature());
                }
  */
                if (listReleves.isEmpty())
                    System.out.println("Attention, Null data found  ! ");

        return listReleves;

        /**
         * *******************************************************************************************************
         */
        case 2:
        yearInt = Integer.parseInt(year);
        missingMonths = stationList.get(stationIdInt)
                .getAndCreateAnnee(yearInt)
                .getMissingData();

        if (missingMonths.size() > 0) {
            // si on a trouver des mois qui manque, on essaye de les uploader depuis les fichiers en local
            //ATTENTION LE CAST STRING INT
            System.out.println("Missing months found , trying to upload them from local files size=" + missingMonths.size());
            for (Mois mois : missingMonths.values()) {
                moisIdInt = mois.getId();
                moisId = ("00" + moisIdInt).substring(String.valueOf(moisIdInt).length());
                getDataForDateByCity(
                        year + moisId,
                        stationId
                );
            }

            missingMonths.clear();

            missingMonths = stationList.get(stationIdInt)
                    .getAndCreateAnnee(yearInt)
                    .getMissingData();

            stationList.get(stationIdInt)
                    .getAndCreateAnnee(yearInt)
                    .showAll();

            if (missingMonths.size() > 0) {
                /**
                 * MANQUE SI APP EST EN LIGNE*
                 */
                //si encore on a trouver des mois qui manque , et si app est enligne on lance le telechargement
                if (Utilitaire.netIsAvailable() != -1) {
                    System.out.println("Still have missing mois , trying to download them! size=" + missingMonths.size());

                    for (Mois mois : missingMonths.values()) {
                        moisIdInt = mois.getId();
                        moisId = ("00" + moisIdInt).substring(String.valueOf(moisIdInt).length());
                        downloadAndUncompress(year + moisId);
                    }


                    System.out.println("Download is done , trying to upload local files ");
                    for (Mois mois : missingMonths.values()) {
                        moisIdInt = mois.getId();
                        moisId = ("00" + moisIdInt).substring(String.valueOf(moisIdInt).length());
                        getDataForDateByCity(
                                year +
                                        moisId
                                ,
                                stationId
                        );
                    }
                    missingMonths = stationList.get(stationIdInt)
                            .getAndCreateAnnee(yearInt)
                            .getMissingData();


                    if (missingMonths.size() > 0) {

                        /**
                         * MANQUE SI APP EST EN LIGNE*
                         */
                        if (Utilitaire.netIsAvailable() != -1) {
                            //si encore on a trouver des mois qui manque , et si app est enligne on lance le telechargement
                            System.out.println("Still have missing mois , trying to download them! size=" + missingMonths.size());

                            for (Mois mois : missingMonths.values()) {
                                moisIdInt = mois.getId();
                                moisId = ("00" + moisIdInt).substring(String.valueOf(moisIdInt).length());
                                downloadAndUncompress(year + moisId);
                            }

                            System.out.println("Download is done , trying to upload local files ");
                        } else {
                            if( importOrNot){
                                 DisplayAlertToImport();
                            }
                            System.out.println("No need to import");
                        }
                        for (Mois mois : missingMonths.values()) {
                            moisIdInt = mois.getId();
                            moisId = ("00" + moisIdInt).substring(String.valueOf(moisIdInt).length());
                            getDataForDateByCity(
                                    year
                                    + moisId,
                                    stationId
                            );
                        }

                        missingMonths = stationList.get(stationIdInt)
                                .getAndCreateAnnee(yearInt)
                                .getMissingData();

                        if (missingMonths.size() > 0) {
                            //si encore on a des mois qui manque
                            System.out.println("Attention - Not completed data,returning data even though ! size=" + missingMonths.size());
                            /*System.out.println("missing months :");
                            for (Mois mois : missingMonths.values()) {
                                System.out.println(mois.getId());
                            }*/

                    }
                } else {
                    /**IMPORT FICHIER**/

                    System.out.println("No internet available");
                }
            }
        }

        System.out.println("Everything looks good, returning data now");
        listReleves = stationList.get(stationIdInt)
                .getAndCreateAnnee(yearInt)
                .getAllReleves(stationName, stationIdInt, x, y);

        if (MinOrMaxOrMoy == 0) {//moy
            listReleves = stationList.get(stationIdInt)
                    .getAndCreateAnnee(yearInt)
                    .getMoyenneParMois(stationName,stationIdInt,x,y);
        } else {
            if (MinOrMaxOrMoy == 1) {//min
                listReleves = stationList.get(stationIdInt)
                        .getAndCreateAnnee(yearInt)
                        .getMinParMois(stationName,stationIdInt,x,y);
            } else {//max
                listReleves = stationList.get(stationIdInt)
                        .getAndCreateAnnee(yearInt)
                        .getMaxParMois(stationName,stationIdInt,x,y);
            }
        }


        System.out.println("List mois .. size:" + listReleves.size());
        if (listReleves.isEmpty())
            System.out.println("Attention , null data found ! ");

        return listReleves;
    }
    return null;
}